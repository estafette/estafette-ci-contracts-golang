// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manifest.v1/estafette_manifest.proto

package manifest_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EstafetteManifest struct {
	Builder              *EstafetteBuilder   `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	Labels               map[string]string   `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Version              *EstafetteVersion   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	GlobalEnvVars        map[string]string   `protobuf:"bytes,4,rep,name=global_env_vars,json=globalEnvVars,proto3" json:"global_env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Triggers             []*EstafetteTrigger `protobuf:"bytes,5,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Stages               []*EstafetteStage   `protobuf:"bytes,6,rep,name=stages,proto3" json:"stages,omitempty"`
	Releases             []*EstafetteRelease `protobuf:"bytes,7,rep,name=releases,proto3" json:"releases,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *EstafetteManifest) Reset()         { *m = EstafetteManifest{} }
func (m *EstafetteManifest) String() string { return proto.CompactTextString(m) }
func (*EstafetteManifest) ProtoMessage()    {}
func (*EstafetteManifest) Descriptor() ([]byte, []int) {
	return fileDescriptor_176eeccede0404b3, []int{0}
}

func (m *EstafetteManifest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstafetteManifest.Unmarshal(m, b)
}
func (m *EstafetteManifest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstafetteManifest.Marshal(b, m, deterministic)
}
func (m *EstafetteManifest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstafetteManifest.Merge(m, src)
}
func (m *EstafetteManifest) XXX_Size() int {
	return xxx_messageInfo_EstafetteManifest.Size(m)
}
func (m *EstafetteManifest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstafetteManifest.DiscardUnknown(m)
}

var xxx_messageInfo_EstafetteManifest proto.InternalMessageInfo

func (m *EstafetteManifest) GetBuilder() *EstafetteBuilder {
	if m != nil {
		return m.Builder
	}
	return nil
}

func (m *EstafetteManifest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *EstafetteManifest) GetVersion() *EstafetteVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *EstafetteManifest) GetGlobalEnvVars() map[string]string {
	if m != nil {
		return m.GlobalEnvVars
	}
	return nil
}

func (m *EstafetteManifest) GetTriggers() []*EstafetteTrigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

func (m *EstafetteManifest) GetStages() []*EstafetteStage {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *EstafetteManifest) GetReleases() []*EstafetteRelease {
	if m != nil {
		return m.Releases
	}
	return nil
}

func init() {
	proto.RegisterType((*EstafetteManifest)(nil), "manifest.v1.EstafetteManifest")
	proto.RegisterMapType((map[string]string)(nil), "manifest.v1.EstafetteManifest.GlobalEnvVarsEntry")
	proto.RegisterMapType((map[string]string)(nil), "manifest.v1.EstafetteManifest.LabelsEntry")
}

func init() {
	proto.RegisterFile("manifest.v1/estafette_manifest.proto", fileDescriptor_176eeccede0404b3)
}

var fileDescriptor_176eeccede0404b3 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x5f, 0xcb, 0xd3, 0x30,
	0x14, 0xc6, 0x59, 0xf7, 0xae, 0xd3, 0x14, 0x51, 0x83, 0x17, 0x61, 0x43, 0x98, 0x7f, 0x2e, 0x86,
	0xb0, 0x8c, 0x6e, 0x17, 0x3a, 0x2f, 0x44, 0x26, 0x43, 0x04, 0xbd, 0x89, 0x32, 0xd0, 0x9b, 0x92,
	0xd6, 0x2c, 0x06, 0xb3, 0x46, 0x92, 0xac, 0xb8, 0xaf, 0xe4, 0x67, 0xf1, 0x43, 0x49, 0xd3, 0xb4,
	0x2b, 0xd8, 0x6d, 0xbc, 0x77, 0xd9, 0xd9, 0xef, 0x39, 0xcf, 0xd3, 0x73, 0x0e, 0x78, 0xbe, 0xa7,
	0xb9, 0xd8, 0x31, 0x63, 0x71, 0x11, 0xcf, 0x99, 0xb1, 0x74, 0xc7, 0xac, 0x65, 0x49, 0x53, 0xfd,
	0xa5, 0x95, 0x55, 0x30, 0x6a, 0x51, 0xa3, 0x67, 0xdd, 0x92, 0xf4, 0x20, 0xe4, 0x77, 0xa6, 0x2b,
	0xc5, 0x39, 0x48, 0x33, 0xc9, 0xa8, 0x61, 0x1e, 0x7a, 0xd2, 0x0d, 0x19, 0x4b, 0x39, 0xbb, 0xdc,
	0xc7, 0x6a, 0xc1, 0xf9, 0x35, 0xb3, 0x82, 0x69, 0x23, 0x54, 0x5e, 0x41, 0x4f, 0xff, 0xde, 0x80,
	0x87, 0x9b, 0xfa, 0xbf, 0x4f, 0x5e, 0x00, 0x5f, 0x82, 0xa1, 0x0f, 0x8e, 0x7a, 0x93, 0xde, 0x34,
	0x5a, 0x3c, 0xc6, 0xad, 0x66, 0xb8, 0x11, 0xac, 0x2b, 0x88, 0xd4, 0x34, 0x5c, 0x83, 0x50, 0xd2,
	0x94, 0x49, 0x83, 0x82, 0x49, 0x7f, 0x1a, 0x2d, 0x5e, 0x74, 0xeb, 0x6a, 0x23, 0xfc, 0xd1, 0xc1,
	0x9b, 0xdc, 0xea, 0x23, 0xf1, 0xca, 0xd2, 0xdc, 0x67, 0x44, 0xfd, 0x4b, 0xe6, 0xdb, 0x0a, 0x22,
	0x35, 0x0d, 0xbf, 0x82, 0xfb, 0x5c, 0xaa, 0x94, 0xca, 0x84, 0xe5, 0x45, 0x52, 0x50, 0x6d, 0xd0,
	0x8d, 0x4b, 0x11, 0x5f, 0x49, 0xf1, 0xde, 0xa9, 0x36, 0x79, 0xb1, 0xa5, 0xda, 0x87, 0xb9, 0xc7,
	0xdb, 0x35, 0xb8, 0x02, 0x77, 0xfc, 0x70, 0x0d, 0x1a, 0xb8, 0x9e, 0x67, 0x42, 0x7d, 0xa9, 0x28,
	0xd2, 0xe0, 0x70, 0x09, 0x42, 0xb7, 0x3a, 0x83, 0x42, 0x27, 0x1c, 0x77, 0x0b, 0x3f, 0x97, 0x0c,
	0xf1, 0x68, 0xe9, 0xe7, 0x8f, 0xc2, 0xa0, 0xe1, 0x25, 0x3f, 0x52, 0x51, 0xa4, 0xc1, 0x47, 0x2b,
	0x10, 0xb5, 0xa6, 0x0a, 0x1f, 0x80, 0xfe, 0x4f, 0x76, 0x74, 0x6b, 0xbc, 0x4b, 0xca, 0x27, 0x7c,
	0x04, 0x06, 0x05, 0x95, 0x07, 0x86, 0x02, 0x57, 0xab, 0x7e, 0xbc, 0x0e, 0x5e, 0xf5, 0x46, 0x6f,
	0x01, 0xfc, 0x7f, 0x14, 0xb7, 0xe9, 0xb0, 0xfe, 0x0d, 0xc6, 0x42, 0xe1, 0xe6, 0xd8, 0x70, 0x26,
	0xda, 0xb1, 0xbf, 0xbd, 0xe1, 0xc2, 0xfe, 0x38, 0xa4, 0x38, 0x53, 0xfb, 0xd3, 0x45, 0x9e, 0x5e,
	0xb3, 0x4c, 0xcc, 0x32, 0x95, 0x5b, 0x4d, 0x33, 0x6b, 0x66, 0x5c, 0x49, 0x9a, 0xf3, 0x79, 0xad,
	0x4f, 0x8a, 0xf8, 0x4f, 0x80, 0x9a, 0x0f, 0xc7, 0xef, 0x3e, 0xe0, 0x66, 0x81, 0xdb, 0x38, 0x0d,
	0xdd, 0x3d, 0x2f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x13, 0xfb, 0x27, 0xbb, 0x03, 0x00,
	0x00,
}
