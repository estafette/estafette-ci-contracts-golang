// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manifest.v1/estafette_trigger.proto

package manifest_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EstafetteTrigger struct {
	Pipeline             *EstafettePipelineTrigger      `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Release              *EstafetteReleaseTrigger       `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	Git                  *EstafetteGitTrigger           `protobuf:"bytes,3,opt,name=git,proto3" json:"git,omitempty"`
	Docker               *EstafetteDockerTrigger        `protobuf:"bytes,4,opt,name=docker,proto3" json:"docker,omitempty"`
	Cron                 *EstafetteCronTrigger          `protobuf:"bytes,5,opt,name=cron,proto3" json:"cron,omitempty"`
	PubSub               *EstafettePubSubTrigger        `protobuf:"bytes,6,opt,name=pub_sub,json=pubSub,proto3" json:"pub_sub,omitempty"`
	BuildAction          *EstafetteTriggerBuildAction   `protobuf:"bytes,7,opt,name=build_action,json=buildAction,proto3" json:"build_action,omitempty"`
	ReleaseAction        *EstafetteTriggerReleaseAction `protobuf:"bytes,8,opt,name=release_action,json=releaseAction,proto3" json:"release_action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *EstafetteTrigger) Reset()         { *m = EstafetteTrigger{} }
func (m *EstafetteTrigger) String() string { return proto.CompactTextString(m) }
func (*EstafetteTrigger) ProtoMessage()    {}
func (*EstafetteTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4ca988580e01498, []int{0}
}

func (m *EstafetteTrigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EstafetteTrigger.Unmarshal(m, b)
}
func (m *EstafetteTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EstafetteTrigger.Marshal(b, m, deterministic)
}
func (m *EstafetteTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstafetteTrigger.Merge(m, src)
}
func (m *EstafetteTrigger) XXX_Size() int {
	return xxx_messageInfo_EstafetteTrigger.Size(m)
}
func (m *EstafetteTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_EstafetteTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_EstafetteTrigger proto.InternalMessageInfo

func (m *EstafetteTrigger) GetPipeline() *EstafettePipelineTrigger {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

func (m *EstafetteTrigger) GetRelease() *EstafetteReleaseTrigger {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *EstafetteTrigger) GetGit() *EstafetteGitTrigger {
	if m != nil {
		return m.Git
	}
	return nil
}

func (m *EstafetteTrigger) GetDocker() *EstafetteDockerTrigger {
	if m != nil {
		return m.Docker
	}
	return nil
}

func (m *EstafetteTrigger) GetCron() *EstafetteCronTrigger {
	if m != nil {
		return m.Cron
	}
	return nil
}

func (m *EstafetteTrigger) GetPubSub() *EstafettePubSubTrigger {
	if m != nil {
		return m.PubSub
	}
	return nil
}

func (m *EstafetteTrigger) GetBuildAction() *EstafetteTriggerBuildAction {
	if m != nil {
		return m.BuildAction
	}
	return nil
}

func (m *EstafetteTrigger) GetReleaseAction() *EstafetteTriggerReleaseAction {
	if m != nil {
		return m.ReleaseAction
	}
	return nil
}

func init() {
	proto.RegisterType((*EstafetteTrigger)(nil), "manifest.v1.EstafetteTrigger")
}

func init() {
	proto.RegisterFile("manifest.v1/estafette_trigger.proto", fileDescriptor_d4ca988580e01498)
}

var fileDescriptor_d4ca988580e01498 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x5f, 0x4f, 0xea, 0x30,
	0x18, 0xc6, 0xc3, 0x9f, 0x03, 0xa4, 0x9c, 0x73, 0x62, 0x7a, 0xd5, 0x70, 0x85, 0xa2, 0x91, 0xa0,
	0x0c, 0xc1, 0x78, 0xa5, 0x21, 0x01, 0x34, 0xc6, 0x18, 0x13, 0x44, 0xe3, 0x85, 0x5e, 0x2c, 0xeb,
	0x28, 0xb3, 0x71, 0xac, 0x4b, 0xd7, 0xf1, 0x65, 0xfc, 0x06, 0x7e, 0x4a, 0x43, 0x69, 0xc7, 0x58,
	0xea, 0xe2, 0x1d, 0x6f, 0xf2, 0xfb, 0x3d, 0x4f, 0xd9, 0xfb, 0x82, 0xd6, 0xd2, 0x09, 0xe8, 0x82,
	0x44, 0xc2, 0x5a, 0xf5, 0x7b, 0x24, 0x12, 0xce, 0x82, 0x08, 0x41, 0x6c, 0xc1, 0xa9, 0xe7, 0x11,
	0x6e, 0x85, 0x9c, 0x09, 0x06, 0xeb, 0x29, 0xa8, 0xd1, 0x36, 0x1b, 0x2e, 0x67, 0xc1, 0xae, 0xd6,
	0xe8, 0x98, 0xc9, 0x39, 0x73, 0x3f, 0x08, 0xcf, 0xb0, 0xc7, 0x66, 0xd6, 0xa3, 0x22, 0x03, 0x9e,
	0x9a, 0xc1, 0x90, 0x86, 0xc4, 0xa7, 0x41, 0xe6, 0xe5, 0x8d, 0x93, 0x1f, 0xe8, 0x18, 0xdb, 0x51,
	0x8c, 0x7f, 0x07, 0x73, 0xe2, 0x13, 0x27, 0xca, 0x26, 0x9f, 0xe5, 0x7e, 0x38, 0x1b, 0xc7, 0xd4,
	0x9f, 0xdb, 0x8e, 0x2b, 0x28, 0x0b, 0x94, 0x31, 0xc8, 0x37, 0x74, 0x4d, 0xda, 0x39, 0xf8, 0x2c,
	0x83, 0xbd, 0x1b, 0x8d, 0x3e, 0x6f, 0x48, 0x38, 0x02, 0x35, 0xfd, 0x77, 0x51, 0xa1, 0x59, 0x68,
	0xd7, 0x07, 0x47, 0x56, 0x2a, 0xdb, 0x4a, 0x84, 0xa9, 0xa2, 0x94, 0x38, 0x4b, 0x34, 0x38, 0x04,
	0x55, 0xd5, 0x87, 0x8a, 0x32, 0xe1, 0xd0, 0x9c, 0x30, 0xdb, 0x40, 0x3a, 0x40, 0x4b, 0x70, 0x00,
	0x4a, 0x1e, 0x15, 0xa8, 0x24, 0xdd, 0xa6, 0xd9, 0xbd, 0xa5, 0x42, 0x7b, 0x6b, 0x18, 0x5e, 0x82,
	0xca, 0x66, 0xf5, 0xa8, 0x2c, 0xb5, 0x96, 0x59, 0xbb, 0x96, 0x8c, 0x36, 0x95, 0x02, 0x2f, 0x40,
	0x79, 0x7d, 0x61, 0xe8, 0x8f, 0x54, 0xf7, 0xcd, 0xea, 0x84, 0xb3, 0x40, 0x8b, 0x12, 0x87, 0x57,
	0xa0, 0xaa, 0x76, 0x8d, 0x2a, 0x79, 0xa5, 0xd3, 0x18, 0x3f, 0xc5, 0x38, 0x29, 0x0d, 0xe5, 0x08,
	0xef, 0xc1, 0xdf, 0xf4, 0x1e, 0x51, 0x55, 0x46, 0xb4, 0xcd, 0x11, 0x4a, 0x1e, 0xaf, 0x85, 0x91,
	0xe4, 0x67, 0x75, 0xbc, 0x1d, 0xe0, 0x23, 0xf8, 0xbf, 0xbb, 0x62, 0x54, 0x93, 0x71, 0x9d, 0xdc,
	0x38, 0xb5, 0x00, 0x15, 0xf8, 0x8f, 0xa7, 0xc7, 0xf1, 0xdb, 0xeb, 0xd0, 0xa3, 0xe2, 0x3d, 0xc6,
	0x96, 0xcb, 0x96, 0xdb, 0x93, 0xda, 0xfe, 0xea, 0xba, 0xb4, 0xeb, 0xb2, 0x40, 0x70, 0xc7, 0x15,
	0x51, 0xd7, 0x63, 0xbe, 0x13, 0x78, 0x3d, 0x5d, 0x67, 0xaf, 0xfa, 0x5f, 0x45, 0x94, 0x14, 0x5a,
	0x93, 0x3b, 0xeb, 0x41, 0xbf, 0xe4, 0xa5, 0x8f, 0x2b, 0xf2, 0x02, 0xcf, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x4d, 0xbb, 0xc7, 0x85, 0x22, 0x04, 0x00, 0x00,
}
